package com.yindeyue.controller;

import java.util.Properties;

import org.mybatis.spring.SqlSessionFactoryBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.jta.atomikos.AtomikosDataSourceBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

@Configuration
public class XAConfiguration {
	/************************** atomikos 多数据源配置 ***************************/

	/*------- db1 -------*/

	/**
	 * db1的 XA datasource
	 *
	 * @return
	 */
	@Bean
	@Primary
	@Qualifier("db1")
	public AtomikosDataSourceBean db1DataSourceBean() {
		AtomikosDataSourceBean atomikosDataSourceBean = new AtomikosDataSourceBean();
		atomikosDataSourceBean.setUniqueResourceName("db1");
		atomikosDataSourceBean.setXaDataSourceClassName("com.mysql.jdbc.jdbc2.optional.MysqlXADataSource");
		Properties properties = new Properties();
		properties.put("URL", "jdbc:mysql://localhost:3306/test");
		properties.put("user", "root");
		properties.put("password", "");
		atomikosDataSourceBean.setXaProperties(properties);
		return atomikosDataSourceBean;
	}

	/**
	 * 构造db1 sessionFactory
	 *
	 * @return
	 */
	@Bean
	@Autowired
	public SqlSessionFactoryBean sessionFactory() {
		SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();
		sessionFactory.setDataSource(db1DataSourceBean());
		return sessionFactory;
	}

	/*------- db2 -------*/

	/**
	 * db2的 XA datasource
	 *
	 * @return
	 */
	@Bean
	@Qualifier("db2")
	public AtomikosDataSourceBean db2DataSourceBean() {
		AtomikosDataSourceBean atomikosDataSourceBean = new AtomikosDataSourceBean();
		atomikosDataSourceBean.setUniqueResourceName("db2");
		atomikosDataSourceBean.setXaDataSourceClassName("com.mysql.jdbc.jdbc2.optional.MysqlXADataSource");
		Properties properties = new Properties();
		properties.put("URL", db2_url);
		properties.put("user", db2_username);
		properties.put("password", db2_password);
		atomikosDataSourceBean.setXaProperties(properties);
		return atomikosDataSourceBean;
	}

	/**
	 * 构造db2 sessionFactory
	 *
	 * @return
	 */
	@Bean
	@Autowired
	public AnnotationSessionFactoryBean db2SessionFactory(
			@Qualifier("db2") AtomikosDataSourceBean atomikosDataSourceBean) {
		AnnotationSessionFactoryBean sessionFactory = new AnnotationSessionFactoryBean();
		sessionFactory.setDataSource(atomikosDataSourceBean);
		sessionFactory.setPackagesToScan(db2_entity_package);
		Properties properties = new Properties();
		properties.put("hibernate.dialect", "org.hibernate.dialect.MySQLInnoDBDialect");
		properties.put("hibernate.show_sql", "false");
		properties.put("hibernate.format_sql", "format");
		properties.put("hibernate.connection.autocommit", "true");
		properties.put("hibernate.connection.url", atomikosDataSourceBean.getXaProperties().get("URL"));
		properties.put("hibernate.connection.driver_class", "com.mysql.jdbc.Driver");
		sessionFactory.setHibernateProperties(properties);
		return sessionFactory;
	}

	/*--------- atomikos -----------*/

	/**
	 * transaction manager
	 *
	 * @return
	 */
	@Bean(destroyMethod = "close", initMethod = "init")
	public UserTransactionManager userTransactionManager() {
		UserTransactionManager userTransactionManager = new UserTransactionManager();
		userTransactionManager.setForceShutdown(false);
		return userTransactionManager;
	}

	/**
	 * jta transactionManager
	 *
	 * @return
	 */
	@Bean
	public JtaTransactionManager transactionManager() {
		JtaTransactionManager jtaTransactionManager = new JtaTransactionManager();
		jtaTransactionManager.setTransactionManager(userTransactionManager());
		return jtaTransactionManager;
	}
}
